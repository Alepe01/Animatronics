# GU√çA DE INSTALACI√ìN - VENTANA DE PRUEBAS
# ==========================================

"""
INSTRUCCIONES PARA INTEGRAR LA VENTANA DE PRUEBAS

1. AGREGAR ARCHIVOS:
   - test_window_manager.py (colocar en la carpeta del proyecto)

2. MODIFICACIONES AL SISTEMA EXISTENTE:
   Los cambios ya est√°n incluidos en los archivos refactorizados.

3. USO DE LA VENTANA DE PRUEBAS:
   - Hacer clic en el bot√≥n "üß™ Pruebas" en los controles r√°pidos
   - La ventana se abre con 4 pesta√±as principales
"""

# FUNCIONALIDADES DE LA VENTANA DE PRUEBAS
FEATURES_INFO = {
    "comentarios_manuales": {
        "descripcion": "Enviar comentarios personalizados",
        "funciones": [
            "Usuario personalizable o aleatorio",
            "√Årea de texto libre para comentarios",
            "Botones de comentarios r√°pidos",
            "Historial de comentarios enviados"
        ]
    },
    
    "regalos_manuales": {
        "descripcion": "Simular regalos de TikTok",
        "funciones": [
            "10 tipos de regalos predefinidos",
            "Donador personalizable",
            "Regalo personalizado con cantidad",
            "Env√≠o directo al Robot de Regalos"
        ]
    },
    
    "modo_automatico": {
        "descripcion": "Simulaci√≥n autom√°tica continua",
        "funciones": [
            "Intervalo configurable (segundos)",
            "Probabilidad de comentarios (70% por defecto)",
            "Probabilidad de regalos (30% por defecto)",
            "Inicio/parada con un bot√≥n"
        ]
    },
    
    "pruebas_rapidas": {
        "descripcion": "Escenarios predefinidos de prueba",
        "funciones": [
            "Chat b√°sico: 4 comentarios normales",
            "Lluvia de regalos: 8 regalos simult√°neos",
            "Todos los modos: Prueba los 8 modos",
            "Spam de chistes: 5 solicitudes seguidas",
            "Sesi√≥n clarividente: Preguntas de futuro",
            "Estr√©s test: 20 comentarios r√°pidos"
        ]
    }
}

# EJEMPLO DE USO PASO A PASO
def ejemplo_uso_ventana_pruebas():
    """
    EJEMPLO DE FLUJO DE PRUEBAS:
    
    1. Abrir ventana de pruebas desde bot√≥n üß™
    
    2. PROBAR COMENTARIOS MANUALES:
       - Pesta√±a "üí¨ Comentarios"
       - Cambiar usuario a "TestUser1"
       - Escribir "Hola Poncho"
       - Clic en "üì§ ENVIAR COMENTARIO"
       - Ver respuesta en panel izquierdo de Poncho
    
    3. PROBAR REGALOS:
       - Pesta√±a "üéÅ Regalos"
       - Cambiar donador a "GenerosoFan"
       - Clic en "Rosa (x1)"
       - Ver respuesta energ√©tica en panel central dorado
    
    4. MODO AUTOM√ÅTICO:
       - Pesta√±a "ü§ñ Autom√°tico"
       - Ajustar intervalo a 2 segundos
       - Clic "‚ñ∂Ô∏è INICIAR AUTOM√ÅTICO"
       - Observar flujo autom√°tico de comentarios y regalos
       - Clic "‚èπÔ∏è DETENER AUTOM√ÅTICO" cuando termine
    
    5. PRUEBAS R√ÅPIDAS:
       - Pesta√±a "‚ö° Pruebas R√°pidas"
       - Clic "üéÅ Lluvia de Regalos"
       - Ver m√∫ltiples regalos procesados r√°pidamente
       - Observar racha del Robot de Regalos
    """
    
    print("Ejemplo de uso documentado arriba")

# TROUBLESHOOTING
TROUBLESHOOTING = {
    "error_import": {
        "problema": "ImportError: test_window_manager.py no encontrado",
        "solucion": "Verificar que test_window_manager.py est√© en la misma carpeta que main.py"
    },
    
    "ventana_no_abre": {
        "problema": "La ventana de pruebas no se abre",
        "solucion": "Verificar que la aplicaci√≥n principal est√© corriendo y conectada"
    },
    
    "comentarios_no_llegan": {
        "problema": "Los comentarios enviados no aparecen en Poncho",
        "solucion": "Verificar que dual_controller est√© inicializado correctamente"
    },
    
    "regalos_no_funcionan": {
        "problema": "Los regalos no van al Robot de Regalos",
        "solucion": "Verificar que msg_type='gift' est√© siendo procesado correctamente"
    },
    
    "modo_automatico_lento": {
        "problema": "El modo autom√°tico es muy lento",
        "solucion": "Reducir intervalo a 1-2 segundos en la configuraci√≥n"
    }
}

# CONFIGURACIONES RECOMENDADAS
RECOMMENDED_SETTINGS = {
    "desarrollo": {
        "intervalo_auto": 2,  # segundos
        "prob_comentarios": 80,  # %
        "prob_regalos": 20,  # %
        "usuarios_test": 5
    },
    
    "pruebas_estres": {
        "intervalo_auto": 0.5,  # segundos
        "prob_comentarios": 60,  # %
        "prob_regalos": 40,  # %
        "usuarios_test": 10
    },
    
    "demostracion": {
        "intervalo_auto": 3,  # segundos
        "prob_comentarios": 70,  # %
        "prob_regalos": 30,  # %
        "usuarios_test": 8
    }
}

# M√âTRICAS A MONITOREAR
METRICAS_IMPORTANTES = [
    "Tiempo de respuesta de Poncho",
    "Tiempo de respuesta del Robot de Regalos",
    "Tasa de procesamiento de comentarios",
    "Rachas m√°ximas de regalos",
    "Memoria utilizada durante pruebas de estr√©s",
    "Errores en el log durante simulaci√≥n"
]

def print_installation_summary():
    """Imprimir resumen de instalaci√≥n"""
    print("""
üß™ VENTANA DE PRUEBAS - RESUMEN DE INSTALACI√ìN

‚úÖ ARCHIVOS NECESARIOS:
- test_window_manager.py (NUEVO)
- main_refactored.py (MODIFICADO)
- gui_refactored.py (MODIFICADO)

‚úÖ FUNCIONALIDADES:
- üí¨ Comentarios manuales con usuarios personalizables
- üéÅ Regalos manuales para probar Robot de Regalos
- ü§ñ Modo autom√°tico con configuraci√≥n avanzada
- ‚ö° 6 pruebas r√°pidas predefinidas
- üìä Estad√≠sticas y monitoreo en tiempo real

‚úÖ VENTAJAS:
- Pruebas sin necesidad de TikTok activo
- Simulaci√≥n realista de chat en vivo
- F√°cil testing de ambos robots
- Escenarios de estr√©s configurables
- Interfaz intuitiva con pesta√±as

‚úÖ USO:
1. Ejecutar main_refactored.py
2. Clic en bot√≥n "üß™ Pruebas"
3. Seleccionar pesta√±a deseada
4. Configurar y enviar pruebas
5. Observar respuestas en tiempo real

‚ö†Ô∏è NOTA: La ventana funciona completamente independiente
de TikTok, ideal para desarrollo y debugging.
""")

if __name__ == "__main__":
    print_installation_summary()
    
    print("\nüìã CONFIGURACIONES DISPONIBLES:")
    for nombre, config in RECOMMENDED_SETTINGS.items():
        print(f"\n{nombre.upper()}:")
        for key, value in config.items():
            print(f"  {key}: {value}")
    
    print(f"\nüîß TROUBLESHOOTING:")
    for problema, info in TROUBLESHOOTING.items():
        print(f"\n{problema}:")
        print(f"  Problema: {info['problema']}")
        print(f"  Soluci√≥n: {info['solucion']}")
    
    print("\n‚úÖ Sistema de pruebas listo para usar!")