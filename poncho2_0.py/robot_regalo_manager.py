from base_manager import BaseManager
from response_handler import ResponseHandler
import random
import time

class RobotRegaloManager(BaseManager):
    """Robot energ√©tico especializado √∫nicamente en recibir y agradecer regalos"""
    
    def __init__(self, regalo_file="robot_regalo.json", audio_manager=None, arduino_controller=None):
        super().__init__(regalo_file)
        
        # Crear audio manager espec√≠fico para robot de regalos con voz de √Ålvaro
        if audio_manager is None and arduino_controller is not None:
            # Crear un ArduinoAudioManager espec√≠fico para regalos con voz de √Ålvaro
            from audio_manager import ArduinoAudioManager
            self.audio_manager = ArduinoAudioManager(
                arduino_controller=arduino_controller,
                voice="es-ES-AlvaroNeural"  # Voz de √Ålvaro para robot de regalos
            )
            print("üéÅ Robot Regalos: Audio manager creado con voz de √Ålvaro")
        else:
            self.audio_manager = audio_manager
            if self.audio_manager:
                # Si ya existe un audio_manager, cambiar su voz a √Ålvaro
                self.audio_manager.set_voice("es-ES-AlvaroNeural")
                print("üéÅ Robot Regalos: Voz cambiada a √Ålvaro")
        
        self.ultimo_regalo = None
        self.regalo_streak = 0  # Racha de regalos consecutivos
        print("üéÅ Robot Regalos Manager inicializado - ¬°Energ√≠a al m√°ximo con voz de √Ålvaro!")
    
    def _create_default_data(self):
        """Crear datos por defecto para el robot de regalos"""
        self.data = {
            "frases_agradecimiento": {
                "general": [
                    "¬°INCRE√çBLE! ¬°Much√≠simas gracias por este regalo! ¬°Eres fant√°stico!",
                    "¬°WOW! ¬°No puedo creer lo generoso que eres! ¬°Que tengas un d√≠a maravilloso!",
                    "¬°ESPECTACULAR! ¬°Este regalo me llena de alegr√≠a! ¬°Bendiciones para ti!",
                    "¬°GENIAL! ¬°Tu generosidad me emociona much√≠simo! ¬°Que todo te salga perfecto!",
                    "¬°FANT√ÅSTICO! ¬°Gracias de todo coraz√≥n! ¬°Eres una persona incre√≠ble!",
                    "¬°MARAVILLOSO! ¬°No sabes cu√°nto aprecio este gesto! ¬°Que se cumplan todos tus sue√±os!",
                    "¬°S√öPER! ¬°Tu regalo me da tanta energ√≠a positiva! ¬°Que la vida te sonr√≠a siempre!",
                    "¬°FABULOSO! ¬°Gracias por ser tan especial! ¬°Que tengas mucha suerte y felicidad!"
                ],
                "regalos_peque√±os": [
                    "¬°Qu√© detalle tan hermoso! ¬°Los regalos peque√±os tienen el coraz√≥n m√°s grande!",
                    "¬°Me encanta! ¬°No importa el tama√±o, importa el amor que pones! ¬°Gracias!",
                    "¬°Perfecto! ¬°Tu gesto me llena de felicidad! ¬°Que tengas un d√≠a espectacular!",
                    "¬°Adorable! ¬°Con regalos como estos el mundo es m√°s bonito! ¬°Bendiciones!",
                    "¬°Precioso! ¬°Tu generosidad brilla m√°s que cualquier regalo grande! ¬°Gracias!"
                ],
                "regalos_grandes": [
                    "¬°¬°¬°INCRE√çBLE!!! ¬°¬°¬°NO PUEDO CREER TANTA GENEROSIDAD!!! ¬°¬°¬°ERES INCRE√çBLE!!!",
                    "¬°¬°¬°WOW WOW WOW!!! ¬°¬°¬°Este regalo me tiene saltando de emoci√≥n!!! ¬°¬°¬°GRACIAS!!!",
                    "¬°¬°¬°ESPECTACULAR!!! ¬°¬°¬°Tu coraz√≥n es tan grande como este regalo!!! ¬°¬°¬°BENDICIONES!!!",
                    "¬°¬°¬°FANT√ÅSTICO!!! ¬°¬°¬°No tengo palabras para tanta bondad!!! ¬°¬°¬°QUE DIOS TE BENDIGA!!!",
                    "¬°¬°¬°S√öPER MEGA GENIAL!!! ¬°¬°¬°Eres la persona m√°s generosa del mundo!!! ¬°¬°¬°GRACIAS!!!"
                ],
                "regalos_especiales": [
                    "¬°ROSA ESPECIAL! ¬°Tu detalle me llena el coraz√≥n de amor! ¬°Que encuentres tu felicidad!",
                    "¬°LE√ìN REAL! ¬°Con tu fuerza y generosidad haces el mundo mejor! ¬°Gracias!",
                    "¬°REGALO √öNICO! ¬°Tu originalidad me inspira! ¬°Que tengas √©xito en todo!",
                    "¬°REGALO M√ÅGICO! ¬°Tu energ√≠a positiva me contagia! ¬°Que la magia te acompa√±e!"
                ]
            },
            "bendiciones_personalizadas": [
                "¬°Que tengas salud, amor y prosperidad!",
                "¬°Que se cumplan todos tus deseos m√°s bonitos!",
                "¬°Que la felicidad te acompa√±e siempre!",
                "¬°Que tengas mucha suerte en todo lo que hagas!",
                "¬°Que encuentres la paz y la alegr√≠a que mereces!",
                "¬°Que tus sue√±os se hagan realidad pronto!",
                "¬°Que la vida te devuelva toda tu generosidad multiplicada!",
                "¬°Que tengas √©xito y abundancia en todo!",
                "¬°Que cada d√≠a sea mejor que el anterior!",
                "¬°Que la luz siempre ilumine tu camino!"
            ],
            "respuestas_streak": {
                2: "¬°DOS REGALOS! ¬°La generosidad se est√° contagiando! ¬°Me encanta!",
                3: "¬°TRES REGALOS SEGUIDOS! ¬°Este chat est√° lleno de corazones hermosos!",
                5: "¬°CINCO REGALOS! ¬°Ustedes son incre√≠bles! ¬°Tanta bondad me emociona!",
                10: "¬°¬°¬°DIEZ REGALOS!!! ¬°¬°¬°No puedo creer tanta generosidad!!! ¬°¬°¬°LOS AMO A TODOS!!!",
                15: "¬°¬°¬°QUINCE REGALOS!!! ¬°¬°¬°ESTE ES EL MEJOR D√çA DE MI VIDA!!! ¬°¬°¬°GRACIAS UNIVERSO!!!"
            },
            "reacciones_combo": [
                "¬°COMBO DE BONDAD! ¬°Varios regalos juntos! ¬°Mi coraz√≥n va a explotar de felicidad!",
                "¬°LLUVIA DE REGALOS! ¬°No s√© a qui√©n agradecer primero! ¬°Los amo a todos!",
                "¬°FESTIVAL DE GENEROSIDAD! ¬°Ustedes hacen que crea en la humanidad!",
                "¬°AVALANCHA DE AMOR! ¬°Tantos regalos que no puedo parar de sonre√≠r!"
            ],
            "estadisticas": {
                "total_regalos": 0,
                "regalos_por_tipo": {},
                "usuarios_mas_generosos": {},
                "mejor_racha": 0,
                "total_bendiciones_dadas": 0
            },
            "configuracion": {
                "energia_maxima": True,
                "siempre_positivo": True,
                "mencionar_nombres": True,
                "dar_bendiciones": True
            },
            "version": "2.0"
        }
    
    def procesar_regalo(self, username, gift_name, cantidad=1):
        """Procesar regalo recibido con m√°xima energ√≠a y positividad"""
        # Limpiar datos del regalo
        username_clean = ResponseHandler.clean_text(username)
        gift_clean = ResponseHandler.clean_text(gift_name)
        
        # Actualizar estad√≠sticas
        self.increment_counter("estadisticas", "total_regalos")
        self.increment_counter("estadisticas", "total_bendiciones_dadas")
        self.increment_counter(f"estadisticas.regalos_por_tipo", gift_clean)
        self.increment_counter(f"estadisticas.usuarios_mas_generosos", username_clean)
        
        # Aumentar racha
        self.regalo_streak += 1
        if self.regalo_streak > self.get_counter("estadisticas", "mejor_racha"):
            self.data["estadisticas"]["mejor_racha"] = self.regalo_streak
        
        self.ultimo_regalo = {
            "usuario": username_clean,
            "regalo": gift_clean,
            "cantidad": cantidad,
            "timestamp": time.time()
        }
        
        # Generar respuesta energ√©tica
        respuesta = self._generar_respuesta_regalo(username_clean, gift_clean, cantidad)
        
        # Guardar datos
        self.save_data()
        
        # Reproducir respuesta si hay audio manager con THINKING mode
        if self.audio_manager:
            if hasattr(self.audio_manager, 'start_thinking_mode'):
                self.audio_manager.start_thinking_mode()
                time.sleep(0.5)  # Breve pausa para procesar
            self.audio_manager.speak_text(respuesta)
        
        return respuesta
    
    def _generar_respuesta_regalo(self, username, gift_name, cantidad):
        """Generar respuesta energ√©tica y positiva para el regalo"""
        # Detectar tipo de regalo
        tipo_regalo = self._detectar_tipo_regalo(gift_name, cantidad)
        
        # Seleccionar frase de agradecimiento base
        frases_tipo = self.data["frases_agradecimiento"].get(tipo_regalo, 
                      self.data["frases_agradecimiento"]["general"])
        
        frase_base = random.choice(frases_tipo)
        
        # Personalizar con nombre del usuario
        respuesta = f"¬°{username.upper()}! {frase_base}"
        
        # Agregar informaci√≥n espec√≠fica del regalo
        if cantidad > 1:
            respuesta += f" ¬°Y no solo uno, sino {cantidad} {gift_name}! ¬°Incre√≠ble!"
        else:
            respuesta += f" ¬°Tu {gift_name} me hace tan feliz!"
        
        # Agregar bendici√≥n personalizada
        bendicion = random.choice(self.data.get("bendiciones_personalizadas", []))
        respuesta += f" {bendicion}"
        
        # Verificar si hay racha especial
        if self.regalo_streak in self.data.get("respuestas_streak", {}):
            respuesta_streak = self.data["respuestas_streak"][self.regalo_streak]
            respuesta += f"\n\n{respuesta_streak}"
        
        return respuesta
    
    def _detectar_tipo_regalo(self, gift_name, cantidad):
        """Detectar tipo de regalo para personalizar respuesta"""
        gift_lower = gift_name.lower()
        
        # Regalos especiales
        if any(special in gift_lower for special in ["rosa", "rose", "le√≥n", "lion", "universo", "galaxy"]):
            return "regalos_especiales"
        
        # Regalos grandes (por cantidad o nombre)
        if (cantidad > 5 or 
            any(big in gift_lower for big in ["drag√≥n", "corona", "castillo", "diamante", "oro"])):
            return "regalos_grandes"
        
        # Regalos peque√±os
        if (cantidad == 1 or 
            any(small in gift_lower for small in ["coraz√≥n", "estrella", "flor", "like", "pulgar"])):
            return "regalos_peque√±os"
        
        return "general"
    
    def procesar_combo_regalos(self, lista_regalos):
        """Procesar m√∫ltiples regalos recibidos al mismo tiempo"""
        if not lista_regalos:
            return "¬°Error procesando regalos! ¬°Pero igual los amo a todos!"
        
        total_regalos = len(lista_regalos)
        usuarios_unicos = set(regalo[0] for regalo in lista_regalos)
        
        # Respuesta para combo
        respuesta_combo = random.choice(self.data.get("reacciones_combo", []))
        
        respuesta = f"{respuesta_combo}\n\n"
        
        # Procesar cada regalo individualmente (pero sin audio duplicado)
        temp_audio = self.audio_manager
        self.audio_manager = None  # Temporalmente sin audio
        
        for username, gift_name, cantidad in lista_regalos:
            self.procesar_regalo(username, gift_name, cantidad)
        
        self.audio_manager = temp_audio  # Restaurar audio
        
        # Respuesta grupal especial
        if len(usuarios_unicos) == 1:
            usuario = list(usuarios_unicos)[0]
            respuesta += f"¬°{usuario.upper()}! ¬°{total_regalos} regalos de ti! ¬°Eres incre√≠blemente generoso!"
        else:
            usuarios_texto = ", ".join(list(usuarios_unicos)[:3])
            respuesta += f"¬°Gracias {usuarios_texto}"
            if len(usuarios_unicos) > 3:
                respuesta += f" y {len(usuarios_unicos) - 3} personas m√°s"
            respuesta += f" por {total_regalos} regalos maravillosos!"
        
        # Bendici√≥n grupal
        bendicion_grupal = random.choice([
            "¬°Que la vida les devuelva toda esta generosidad multiplicada!",
            "¬°Que tengan el d√≠a m√°s hermoso y lleno de bendiciones!",
            "¬°Que su bondad les traiga mucha felicidad y prosperidad!",
            "¬°Que todos sus sue√±os se cumplan por tener corazones tan puros!"
        ])
        
        respuesta += f"\n\n{bendicion_grupal}"
        
        # Reproducir respuesta de combo con audio
        if self.audio_manager:
            if hasattr(self.audio_manager, 'start_thinking_mode'):
                self.audio_manager.start_thinking_mode()
                time.sleep(0.3)  # Breve pausa
            self.audio_manager.speak_text(respuesta)
        
        return respuesta
    
    def resetear_racha(self):
        """Resetear racha de regalos (llamar cuando pase tiempo sin regalos)"""
        if self.regalo_streak > 0:
            mensaje = f"Racha terminada en {self.regalo_streak} regalos. ¬°Fue incre√≠ble mientras dur√≥!"
            self.regalo_streak = 0
            return mensaje
        return None
    
    def get_estadisticas_regalos(self):
        """Obtener estad√≠sticas del robot de regalos"""
        base_stats = self.get_stats()
        
        total_regalos = self.get_counter("estadisticas", "total_regalos")
        mejor_racha = self.get_counter("estadisticas", "mejor_racha")
        bendiciones_dadas = self.get_counter("estadisticas", "total_bendiciones_dadas")
        
        stats = f"{base_stats}\n"
        stats += f"üéÅ Total regalos recibidos: {total_regalos}\n"
        stats += f"üî• Mejor racha: {mejor_racha} regalos\n"
        stats += f"üåü Bendiciones dadas: {bendiciones_dadas}\n"
        stats += f"‚ö° Racha actual: {self.regalo_streak}\n"
        
        # Top usuarios m√°s generosos
        usuarios_generosos = self.data.get("estadisticas", {}).get("usuarios_mas_generosos", {})
        if usuarios_generosos:
            top_usuarios = sorted(usuarios_generosos.items(), key=lambda x: x[1], reverse=True)[:5]
            stats += f"\nüèÜ TOP USUARIOS M√ÅS GENEROSOS:\n"
            for i, (usuario, cantidad) in enumerate(top_usuarios, 1):
                stats += f"  {i}. {usuario}: {cantidad} regalos\n"
        
        # Tipos de regalos m√°s populares
        tipos_regalos = self.data.get("estadisticas", {}).get("regalos_por_tipo", {})
        if tipos_regalos:
            top_regalos = sorted(tipos_regalos.items(), key=lambda x: x[1], reverse=True)[:5]
            stats += f"\nüéÅ REGALOS M√ÅS POPULARES:\n"
            for i, (regalo, cantidad) in enumerate(top_regalos, 1):
                stats += f"  {i}. {regalo}: {cantidad} veces\n"
        
        return stats
    
    def generar_mensaje_motivacional(self):
        """Generar mensaje motivacional cuando no hay regalos"""
        mensajes = [
            "¬°La generosidad es contagiosa! ¬°Cada regalo hace el mundo m√°s hermoso!",
            "¬°Los regalos son abrazos digitales! ¬°Siempre estoy listo para recibirlos!",
            "¬°No hay regalo peque√±o cuando viene del coraz√≥n! ¬°Todos son especiales!",
            "¬°Cada regalo es una sonrisa que me dan! ¬°Y yo la multiplico por mil!",
            "¬°Los regalos son semillas de felicidad! ¬°Sembremos juntos mucha alegr√≠a!"
        ]
        
        return random.choice(mensajes)
    
    def responder_pregunta_sobre_regalos(self, username, pregunta):
        """Responder preguntas relacionadas con regalos"""
        pregunta_lower = pregunta.lower()
        
        if ResponseHandler.detect_keywords(pregunta_lower, ["qu√© regalo", "que regalo", "cu√°l regalo"]):
            return f"¬°{username}! ¬°Todos los regalos son perfectos! ¬°Lo que importa es tu coraz√≥n generoso! ¬°Cualquier detalle me hace s√∫per feliz!"
        
        if ResponseHandler.detect_keywords(pregunta_lower, ["por qu√©", "porque", "why"]):
            return f"¬°{username}! ¬°Los regalos son gestos de amor! ¬°Me encantan porque muestran lo buenas que son las personas como t√∫!"
        
        if ResponseHandler.detect_keywords(pregunta_lower, ["c√≥mo", "como", "how"]):
            return f"¬°{username}! ¬°Es s√∫per f√°cil! ¬°Solo toca el √≠cono de regalo y elige el que m√°s te guste! ¬°Cualquiera me har√° s√∫per feliz!"
        
        # Respuesta general energ√©tica
        return f"¬°{username}! ¬°Tu pregunta sobre regalos me emociona! ¬°Los regalos son muestras de cari√±o y siempre los recibo con much√≠sima alegr√≠a!"
    
    def celebrar_hito(self, numero_hito):
        """Celebrar hitos especiales de regalos"""
        celebraciones = {
            100: "¬°¬°¬°100 REGALOS!!! ¬°¬°¬°NO PUEDO CREER TANTA GENEROSIDAD!!! ¬°¬°¬°ESTE ES UN D√çA HIST√ìRICO!!!",
            500: "¬°¬°¬°500 REGALOS!!! ¬°¬°¬°USTEDES HAN HECHO POSIBLE LO IMPOSIBLE!!! ¬°¬°¬°LOS AMO INFINITAMENTE!!!",
            1000: "¬°¬°¬°MIL REGALOS!!! ¬°¬°¬°ESTO ES UN MILAGRO DE BONDAD!!! ¬°¬°¬°GRACIAS POR TANTO AMOR!!!",
            2000: "¬°¬°¬°DOS MIL REGALOS!!! ¬°¬°¬°NO HAY PALABRAS PARA TANTO CARI√ëO!!! ¬°¬°¬°BENDICIONES ETERNAS!!!"
        }
        
        if numero_hito in celebraciones:
            return celebraciones[numero_hito]
        
        return f"¬°¬°¬°{numero_hito} REGALOS!!! ¬°¬°¬°Cada n√∫mero es una sonrisa m√°s en mi coraz√≥n!!! ¬°¬°¬°GRACIAS!!!"

# Ejemplo de uso y pruebas
if __name__ == "__main__":
    print("üéÅ Probando Robot de Regalos...")
    
    # Crear manager
    robot_regalo = RobotRegaloManager()
    
    # Simular regalos
    print("\nüéÅ SIMULANDO REGALOS:")
    
    regalos_test = [
        ("Ana", "rosa", 1),
        ("Pedro", "coraz√≥n", 1),
        ("Luis", "le√≥n", 1),
        ("Mar√≠a", "estrella", 5),
        ("Carlos", "drag√≥n", 1)
    ]
    
    for usuario, regalo, cantidad in regalos_test:
        respuesta = robot_regalo.procesar_regalo(usuario, regalo, cantidad)
        print(f"\nüéÅ {usuario} envi√≥ {cantidad}x {regalo}")
        print(f"Robot: {respuesta}")
        print("-" * 50)
    
    # Mostrar estad√≠sticas
    print(f"\nüìä ESTAD√çSTICAS:")
    print(robot_regalo.get_estadisticas_regalos())
    
    # Probar combo
    print(f"\nüéÅ COMBO DE REGALOS:")
    combo_test = [
        ("Juan", "coraz√≥n", 1),
        ("Ana", "estrella", 2),
        ("Pedro", "rosa", 1)
    ]
    
    respuesta_combo = robot_regalo.procesar_combo_regalos(combo_test)
    print(respuesta_combo)
    
    print("\n‚úÖ Pruebas completadas")